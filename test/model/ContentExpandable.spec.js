/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheConfluenceCloudRestApi);
  }
}(this, function(expect, TheConfluenceCloudRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheConfluenceCloudRestApi.ContentExpandable();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ContentExpandable', function() {
    it('should create an instance of ContentExpandable', function() {
      // uncomment below and update the code to test ContentExpandable
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be.a(TheConfluenceCloudRestApi.ContentExpandable);
    });

    it('should have the property childTypes (base name: "childTypes")', function() {
      // uncomment below and update the code to test the property childTypes
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be();
    });

    it('should have the property container (base name: "container")', function() {
      // uncomment below and update the code to test the property container
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be();
    });

    it('should have the property operations (base name: "operations")', function() {
      // uncomment below and update the code to test the property operations
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be();
    });

    it('should have the property children (base name: "children")', function() {
      // uncomment below and update the code to test the property children
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be();
    });

    it('should have the property restrictions (base name: "restrictions")', function() {
      // uncomment below and update the code to test the property restrictions
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be();
    });

    it('should have the property history (base name: "history")', function() {
      // uncomment below and update the code to test the property history
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be();
    });

    it('should have the property ancestors (base name: "ancestors")', function() {
      // uncomment below and update the code to test the property ancestors
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be();
    });

    it('should have the property body (base name: "body")', function() {
      // uncomment below and update the code to test the property body
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be();
    });

    it('should have the property descendants (base name: "descendants")', function() {
      // uncomment below and update the code to test the property descendants
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be();
    });

    it('should have the property space (base name: "space")', function() {
      // uncomment below and update the code to test the property space
      //var instane = new TheConfluenceCloudRestApi.ContentExpandable();
      //expect(instance).to.be();
    });

  });

}));
